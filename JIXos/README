JIXos
----------------------------------------

Requirements
----------------------

This version has been tested successfully with Arduino 1.0.5.
It will not compile for sure with Arduino < 1.0.

Creating a new mode
----------------------

To create a new mode, open the project in the Arduino application (open the JIXos.ino file, which will open all associated files). Create a new tab with the desired name (by convention we use JIXZZZZZZZMode where ZZZZZZZZ is the name of your mode).

A mode should contain an entry point function with the following prototype:

unsigned int myMode(uint8_t hourLeft, 
                    uint8_t hourRight, 
                    uint8_t minuteLeft, 
                    uint8_t minuteRight,
                    uint8_t secondLeft, 
                    uint8_t secondRight, 
                    uint8_t luminosity,
                    bool    hold);

hourLeft, hourRight, minuteLeft, minuteRight, secondLeft, secondRight contains the full hour to be displayed, separated by digits. Most modes only uses hour and minutes (seconds is a bit complex to display).
The luminosity parameter must be passed as parameter to the low-level API to access the LEDs (see later);
The hold parameter is used to implement support for luminosity and hour setting. When hold=false, the mode operates normally. When hold=true, the mode must produces the very same display as during its last invokation. This generally requires to store the "state" of the mode (random numbers generated, colors, etc.).

The return value of the function indicates in how many milliseconds the function should be called next (you would typically pass 1000 to update the display each seconds, or something like 10 for really fast animations).

Low-level API
---------------------------------

In order to access the clock's hardware, a low-level API is available. This allows avoiding messing with the hardware, and additionally allows compilation with the JIXSDK (see corresponding directory).

The API is composed of the following functions:

void ledsBegin();

>> This function must be called prior to making any change to the LEDs.

void ledsEnd();

>> This function must be called after making changes to the LEDs, to "commit" the change.

void ledsSetColor(ledNumber, h, s, l);

>> This function allows to set the H, S, L (Hue, Saturation, Lightness) color of the LEDs #ledNumber. ledNumber is between 1 and 27, corresponding to the number appearing on the pcb (ledNumber = 12 for D12). The l parameter must always be set to the luminosity value passed as parameter to the mode's entry point.

Adding the mode to the main
----------------------------

For the mode to be executed and available when cycling using the "Mode" button, you must modify the JIXos.ino file:
 - Increment the globalNbModes constant
 - Add the entry point function of your mode to the globalModeFunctions function pointer array (at the end).

Note: the software will not support more than 27 modes for now.

